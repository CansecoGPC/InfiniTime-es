diff --git a/src/components/ble/MusicService.h b/src/components/ble/MusicService.h
index f4b902fe..9af155ab 100644
--- a/src/components/ble/MusicService.h
+++ b/src/components/ble/MusicService.h
@@ -70,9 +70,9 @@ namespace Pinetime {
 
       uint16_t eventHandle {};
 
-      std::string artistName {"Waiting for"};
+      std::string artistName {"Esperando a"};
       std::string albumName {};
-      std::string trackName {"track information.."};
+      std::string trackName {"informacion pista."};
 
       bool playing {false};
 
diff --git a/src/components/datetime/DateTimeController.cpp b/src/components/datetime/DateTimeController.cpp
index 9e9fb6e4..0cf9723b 100644
--- a/src/components/datetime/DateTimeController.cpp
+++ b/src/components/datetime/DateTimeController.cpp
@@ -5,10 +5,10 @@
 using namespace Pinetime::Controllers;
 
 namespace {
-  char const* DaysStringShort[] = {"--", "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"};
-  char const* DaysStringShortLow[] = {"--", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};
-  char const* MonthsString[] = {"--", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};
-  char const* MonthsStringLow[] = {"--", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
+  char const* DaysStringShort[] = {"--", "LUN", "MAR", "MIE", "JUE", "VIE", "SAB", "DOM"};
+  char const* DaysStringShortLow[] = {"--", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom"};
+  char const* MonthsString[] = {"--", "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SEP", "OCT", "NOV", "DIC"};
+  char const* MonthsStringLow[] = {"--", "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"};
 }
 
 DateTime::DateTime(Controllers::Settings& settingsController) : settingsController {settingsController} {
diff --git a/src/displayapp/screens/Alarm.cpp b/src/displayapp/screens/Alarm.cpp
index 4e6ce797..aeac2232 100644
--- a/src/displayapp/screens/Alarm.cpp
+++ b/src/displayapp/screens/Alarm.cpp
@@ -252,13 +252,13 @@ void Alarm::ShowInfo() {
     auto secToAlarm = timeToAlarm % 60;
 
     lv_label_set_text_fmt(txtMessage,
-                          "Time to\nalarm:\n%2lu Days\n%2lu Hours\n%2lu Minutes\n%2lu Seconds",
+                          "Tiempo hasta\nalarma:\n%2lu Dias\n%2lu Horas\n%2lu Minutos\n%2lu Segundos",
                           daysToAlarm,
                           hrsToAlarm,
                           minToAlarm,
                           secToAlarm);
   } else {
-    lv_label_set_text_static(txtMessage, "Alarm\nis not\nset.");
+    lv_label_set_text_static(txtMessage, "La alarma\nno esta\najustada.");
   }
 }
 
@@ -272,13 +272,13 @@ void Alarm::SetRecurButtonState() {
   using Pinetime::Controllers::AlarmController;
   switch (alarmController.Recurrence()) {
     case AlarmController::RecurType::None:
-      lv_label_set_text_static(txtRecur, "ONCE");
+      lv_label_set_text_static(txtRecur, "UNA VEZ");
       break;
     case AlarmController::RecurType::Daily:
-      lv_label_set_text_static(txtRecur, "DAILY");
+      lv_label_set_text_static(txtRecur, "DIARIO");
       break;
     case AlarmController::RecurType::Weekdays:
-      lv_label_set_text_static(txtRecur, "MON-FRI");
+      lv_label_set_text_static(txtRecur, "LUN-VIER");
   }
 }
 
diff --git a/src/displayapp/screens/BatteryInfo.cpp b/src/displayapp/screens/BatteryInfo.cpp
index ab0a2bd4..ae59bd82 100644
--- a/src/displayapp/screens/BatteryInfo.cpp
+++ b/src/displayapp/screens/BatteryInfo.cpp
@@ -54,21 +54,21 @@ void BatteryInfo::Refresh() {
 
   if (batteryController.IsCharging()) {
     lv_obj_set_style_local_bg_color(charging_bar, LV_BAR_PART_INDIC, LV_STATE_DEFAULT, LV_COLOR_RED);
-    lv_label_set_text_static(status, "Charging");
+    lv_label_set_text_static(status, "Cargando");
   } else if (batteryPercent == 100) {
     lv_obj_set_style_local_bg_color(charging_bar, LV_BAR_PART_INDIC, LV_STATE_DEFAULT, LV_COLOR_BLUE);
-    lv_label_set_text_static(status, "Fully charged");
+    lv_label_set_text_static(status, "Cargado");
   } else if (batteryPercent < 10) {
     lv_obj_set_style_local_bg_color(charging_bar, LV_BAR_PART_INDIC, LV_STATE_DEFAULT, LV_COLOR_YELLOW);
-    lv_label_set_text_static(status, "Battery low");
+    lv_label_set_text_static(status, "Bateria baja");
   } else {
     lv_obj_set_style_local_bg_color(charging_bar, LV_BAR_PART_INDIC, LV_STATE_DEFAULT, Colors::highlight);
-    lv_label_set_text_static(status, "Discharging");
+    lv_label_set_text_static(status, "Descargando");
   }
 
   lv_label_set_text_fmt(percent, "%02i%%", batteryPercent);
 
   lv_obj_align(status, charging_bar, LV_ALIGN_OUT_BOTTOM_MID, 0, 20);
-  lv_label_set_text_fmt(voltage, "%1i.%02i volts", batteryVoltage / 1000, batteryVoltage % 1000 / 10);
+  lv_label_set_text_fmt(voltage, "%1i.%02i voltios", batteryVoltage / 1000, batteryVoltage % 1000 / 10);
   lv_bar_set_value(charging_bar, batteryPercent, LV_ANIM_ON);
 }
diff --git a/src/displayapp/screens/FirmwareUpdate.cpp b/src/displayapp/screens/FirmwareUpdate.cpp
index c40240c9..68060dbe 100644
--- a/src/displayapp/screens/FirmwareUpdate.cpp
+++ b/src/displayapp/screens/FirmwareUpdate.cpp
@@ -8,7 +8,7 @@ using namespace Pinetime::Applications::Screens;
 FirmwareUpdate::FirmwareUpdate(const Pinetime::Controllers::Ble& bleController) : bleController {bleController} {
 
   titleLabel = lv_label_create(lv_scr_act(), nullptr);
-  lv_label_set_text_static(titleLabel, "Firmware update");
+  lv_label_set_text_static(titleLabel, "Actua. Firmware");
   lv_obj_align(titleLabel, nullptr, LV_ALIGN_IN_TOP_MID, 0, 50);
 
   bar1 = lv_bar_create(lv_scr_act(), nullptr);
diff --git a/src/displayapp/screens/FirmwareValidation.cpp b/src/displayapp/screens/FirmwareValidation.cpp
index 4a1b3d9f..aa67e3b4 100644
--- a/src/displayapp/screens/FirmwareValidation.cpp
+++ b/src/displayapp/screens/FirmwareValidation.cpp
@@ -32,10 +32,10 @@ FirmwareValidation::FirmwareValidation(Pinetime::Controllers::FirmwareValidator&
   lv_obj_set_width(labelIsValidated, 240);
 
   if (validator.IsValidated()) {
-    lv_label_set_text_static(labelIsValidated, "You have already\n#00ff00 validated# this firmware#");
+    lv_label_set_text_static(labelIsValidated, "Ya has\n#00ff00 validado# este firmware#");
   } else {
     lv_label_set_text_static(labelIsValidated,
-                             "Please #00ff00 Validate# this version or\n#ff0000 Reset# to rollback to the previous version.");
+                             "Por favor #00ff00 Valida# esta version o\n#ff0000 Reinicia# para volver a la version anterior.");
 
     buttonValidate = lv_btn_create(lv_scr_act(), nullptr);
     buttonValidate->user_data = this;
@@ -45,7 +45,7 @@ FirmwareValidation::FirmwareValidation(Pinetime::Controllers::FirmwareValidator&
     lv_obj_set_style_local_bg_color(buttonValidate, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, Colors::highlight);
 
     labelButtonValidate = lv_label_create(buttonValidate, nullptr);
-    lv_label_set_text_static(labelButtonValidate, "Validate");
+    lv_label_set_text_static(labelButtonValidate, "Valida");
 
     buttonReset = lv_btn_create(lv_scr_act(), nullptr);
     buttonReset->user_data = this;
@@ -55,7 +55,7 @@ FirmwareValidation::FirmwareValidation(Pinetime::Controllers::FirmwareValidator&
     lv_obj_set_event_cb(buttonReset, ButtonEventHandler);
 
     labelButtonReset = lv_label_create(buttonReset, nullptr);
-    lv_label_set_text_static(labelButtonReset, "Reset");
+    lv_label_set_text_static(labelButtonReset, "Reinicia");
   }
 }
 
diff --git a/src/displayapp/screens/HeartRate.cpp b/src/displayapp/screens/HeartRate.cpp
index f611fa26..d7553dc6 100644
--- a/src/displayapp/screens/HeartRate.cpp
+++ b/src/displayapp/screens/HeartRate.cpp
@@ -11,13 +11,13 @@ namespace {
   const char* ToString(Pinetime::Controllers::HeartRateController::States s) {
     switch (s) {
       case Pinetime::Controllers::HeartRateController::States::NotEnoughData:
-        return "Not enough data,\nplease wait...";
+        return "Faltan datos,\nespere, por favor...";
       case Pinetime::Controllers::HeartRateController::States::NoTouch:
-        return "No touch detected";
+        return "Pulso no detectado";
       case Pinetime::Controllers::HeartRateController::States::Running:
-        return "Measuring...";
+        return "Midiendo...";
       case Pinetime::Controllers::HeartRateController::States::Stopped:
-        return "Stopped";
+        return "Parado";
     }
     return "";
   }
@@ -45,7 +45,7 @@ HeartRate::HeartRate(Controllers::HeartRateController& heartRateController, Syst
   lv_obj_align(label_hr, nullptr, LV_ALIGN_CENTER, 0, -40);
 
   label_bpm = lv_label_create(lv_scr_act(), nullptr);
-  lv_label_set_text_static(label_bpm, "Heart rate BPM");
+  lv_label_set_text_static(label_bpm, "Pulsaciones BPM");
   lv_obj_align(label_bpm, label_hr, LV_ALIGN_OUT_TOP_MID, 0, -20);
 
   label_status = lv_label_create(lv_scr_act(), nullptr);
@@ -110,8 +110,8 @@ void HeartRate::OnStartStopEvent(lv_event_t event) {
 
 void HeartRate::UpdateStartStopButton(bool isRunning) {
   if (isRunning) {
-    lv_label_set_text_static(label_startStop, "Stop");
+    lv_label_set_text_static(label_startStop, "Parar");
   } else {
-    lv_label_set_text_static(label_startStop, "Start");
+    lv_label_set_text_static(label_startStop, "Empezar");
   }
 }
diff --git a/src/displayapp/screens/Navigation.cpp b/src/displayapp/screens/Navigation.cpp
index 7baea09d..adac2688 100644
--- a/src/displayapp/screens/Navigation.cpp
+++ b/src/displayapp/screens/Navigation.cpp
@@ -140,7 +140,7 @@ Navigation::Navigation(Pinetime::Controllers::NavigationService& nav) : navServi
   txtNarrative = lv_label_create(lv_scr_act(), nullptr);
   lv_label_set_long_mode(txtNarrative, LV_LABEL_LONG_BREAK);
   lv_obj_set_width(txtNarrative, LV_HOR_RES);
-  lv_label_set_text_static(txtNarrative, "Navigation");
+  lv_label_set_text_static(txtNarrative, "Navegacion");
   lv_label_set_align(txtNarrative, LV_LABEL_ALIGN_CENTER);
   lv_obj_align(txtNarrative, nullptr, LV_ALIGN_CENTER, 0, 10);
 
diff --git a/src/displayapp/screens/Notifications.cpp b/src/displayapp/screens/Notifications.cpp
index 037c43a7..3e803768 100644
--- a/src/displayapp/screens/Notifications.cpp
+++ b/src/displayapp/screens/Notifications.cpp
@@ -246,8 +246,8 @@ namespace {
 
 Notifications::NotificationItem::NotificationItem(Pinetime::Controllers::AlertNotificationService& alertNotificationService,
                                                   Pinetime::Controllers::MotorController& motorController)
-  : NotificationItem("Notification",
-                     "No notification to display",
+  : NotificationItem("Notificacion",
+                     "No hay notificaciones",
                      0,
                      Controllers::NotificationManager::Categories::Unknown,
                      0,
@@ -288,7 +288,7 @@ Notifications::NotificationItem::NotificationItem(const char* title,
   lv_obj_t* alert_type = lv_label_create(container, nullptr);
   lv_obj_set_style_local_text_color(alert_type, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, Colors::orange);
   if (title == nullptr) {
-    lv_label_set_text_static(alert_type, "Notification");
+    lv_label_set_text_static(alert_type, "Notificacion");
   } else {
     // copy title to label and replace newlines with spaces
     lv_label_set_text(alert_type, title);
@@ -313,7 +313,7 @@ Notifications::NotificationItem::NotificationItem(const char* title,
       break;
     case Controllers::NotificationManager::Categories::IncomingCall: {
       lv_obj_set_height(subject_container, 108);
-      lv_label_set_text_static(alert_subject, "Incoming call from");
+      lv_label_set_text_static(alert_subject, "Llamada entrante de");
 
       lv_obj_t* alert_caller = lv_label_create(subject_container, nullptr);
       lv_obj_align(alert_caller, alert_subject, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
diff --git a/src/displayapp/screens/Steps.cpp b/src/displayapp/screens/Steps.cpp
index c5faaf05..c6c45020 100644
--- a/src/displayapp/screens/Steps.cpp
+++ b/src/displayapp/screens/Steps.cpp
@@ -38,12 +38,12 @@ Steps::Steps(Controllers::MotionController& motionController, Controllers::Setti
 
   lv_obj_t* lstepsL = lv_label_create(lv_scr_act(), nullptr);
   lv_obj_set_style_local_text_color(lstepsL, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, Colors::lightGray);
-  lv_label_set_text_static(lstepsL, "Steps");
+  lv_label_set_text_static(lstepsL, "Pasos");
   lv_obj_align(lstepsL, lSteps, LV_ALIGN_OUT_BOTTOM_MID, 0, 5);
 
   lv_obj_t* lstepsGoal = lv_label_create(lv_scr_act(), nullptr);
   lv_obj_set_style_local_text_color(lstepsGoal, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_CYAN);
-  lv_label_set_text_fmt(lstepsGoal, "Goal: %5lu", settingsController.GetStepsGoal());
+  lv_label_set_text_fmt(lstepsGoal, "Obje: %5lu", settingsController.GetStepsGoal());
   lv_label_set_align(lstepsGoal, LV_LABEL_ALIGN_CENTER);
   lv_obj_align(lstepsGoal, lSteps, LV_ALIGN_OUT_BOTTOM_MID, 0, 40);
 
@@ -55,13 +55,13 @@ Steps::Steps(Controllers::MotionController& motionController, Controllers::Setti
   lv_obj_set_style_local_bg_color(resetBtn, LV_BTN_PART_MAIN, LV_STATE_DEFAULT, Colors::bgAlt);
   lv_obj_align(resetBtn, lv_scr_act(), LV_ALIGN_IN_BOTTOM_MID, 0, 0);
   resetButtonLabel = lv_label_create(resetBtn, nullptr);
-  lv_label_set_text_static(resetButtonLabel, "Reset");
+  lv_label_set_text_static(resetButtonLabel, "Reinici");
 
   currentTripSteps = motionController.GetTripSteps();
 
   tripLabel = lv_label_create(lv_scr_act(), nullptr);
   lv_obj_set_style_local_text_color(tripLabel, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_YELLOW);
-  lv_label_set_text_fmt(tripLabel, "Trip: %5li", currentTripSteps);
+  lv_label_set_text_fmt(tripLabel, "Viaj: %5li", currentTripSteps);
   lv_obj_align(tripLabel, lstepsGoal, LV_ALIGN_IN_LEFT_MID, 0, 20);
 
   taskRefresh = lv_task_create(RefreshTaskCallback, 100, LV_TASK_PRIO_MID, this);
@@ -80,9 +80,9 @@ void Steps::Refresh() {
   lv_obj_align(lSteps, nullptr, LV_ALIGN_CENTER, 0, -40);
 
   if (currentTripSteps < 100000) {
-    lv_label_set_text_fmt(tripLabel, "Trip: %5li", currentTripSteps);
+    lv_label_set_text_fmt(tripLabel, "Viaj: %5li", currentTripSteps);
   } else {
-    lv_label_set_text_fmt(tripLabel, "Trip: 99999+");
+    lv_label_set_text_fmt(tripLabel, "Viaj: 99999+");
   }
   lv_arc_set_value(stepsArc, int16_t(500 * stepsCount / settingsController.GetStepsGoal()));
 }
diff --git a/src/displayapp/screens/SystemInfo.cpp b/src/displayapp/screens/SystemInfo.cpp
index eea75938..048708b6 100644
--- a/src/displayapp/screens/SystemInfo.cpp
+++ b/src/displayapp/screens/SystemInfo.cpp
@@ -275,11 +275,11 @@ std::unique_ptr<Screen> SystemInfo::CreateScreen5() {
   lv_obj_t* label = lv_label_create(lv_scr_act(), nullptr);
   lv_label_set_recolor(label, true);
   lv_label_set_text_static(label,
-                           "Software Licensed\n"
-                           "under the terms of\n"
-                           "the GNU General\n"
+                           "Programa Licenciado\n"
+                           "bajo los terminos\n"
+                           "de la GNU General\n"
                            "Public License v3\n"
-                           "#808080 Source code#\n"
+                           "#808080 Codigo fuente#\n"
                            "#FFFF00 https://github.com/#\n"
                            "#FFFF00 InfiniTimeOrg/#\n"
                            "#FFFF00 InfiniTime#");
diff --git a/src/displayapp/screens/Timer.cpp b/src/displayapp/screens/Timer.cpp
index d9488740..5adfe2ae 100644
--- a/src/displayapp/screens/Timer.cpp
+++ b/src/displayapp/screens/Timer.cpp
@@ -86,7 +86,7 @@ void Timer::MaskReset() {
   // A click event is processed before a release event,
   // so the release event would override the "Pause" text without this check
   if (!timer.IsRunning()) {
-    lv_label_set_text_static(txtPlayPause, "Start");
+    lv_label_set_text_static(txtPlayPause, "Listo");
   }
   maskPosition = 0;
   UpdateMask();
@@ -108,7 +108,7 @@ void Timer::Refresh() {
     minuteCounter.SetValue(secondsRemaining.count() / 60);
     secondCounter.SetValue(secondsRemaining.count() % 60);
   } else if (buttonPressing && xTaskGetTickCount() > pressTime + pdMS_TO_TICKS(150)) {
-    lv_label_set_text_static(txtPlayPause, "Reset");
+    lv_label_set_text_static(txtPlayPause, "Reinici");
     maskPosition += 15;
     if (maskPosition > 240) {
       MaskReset();
@@ -122,13 +122,13 @@ void Timer::Refresh() {
 void Timer::SetTimerRunning() {
   minuteCounter.HideControls();
   secondCounter.HideControls();
-  lv_label_set_text_static(txtPlayPause, "Pause");
+  lv_label_set_text_static(txtPlayPause, "Pausa");
 }
 
 void Timer::SetTimerStopped() {
   minuteCounter.ShowControls();
   secondCounter.ShowControls();
-  lv_label_set_text_static(txtPlayPause, "Start");
+  lv_label_set_text_static(txtPlayPause, "Listo");
 }
 
 void Timer::ToggleRunning() {
diff --git a/src/displayapp/screens/Twos.cpp b/src/displayapp/screens/Twos.cpp
index 8157a160..e98bc8e8 100644
--- a/src/displayapp/screens/Twos.cpp
+++ b/src/displayapp/screens/Twos.cpp
@@ -60,7 +60,7 @@ Twos::Twos() {
   lv_label_set_align(scoreText, LV_ALIGN_IN_LEFT_MID);
   lv_obj_align(scoreText, nullptr, LV_ALIGN_IN_TOP_LEFT, 0, 0);
   lv_label_set_recolor(scoreText, true);
-  lv_label_set_text_fmt(scoreText, "Score #FFFF00 %i#", score);
+  lv_label_set_text_fmt(scoreText, "Puntos #FFFF00 %i#", score);
 }
 
 Twos::~Twos() {
@@ -103,7 +103,7 @@ bool Twos::tryMerge(int newRow, int newCol, int oldRow, int oldCol) {
       if (!grid[newRow][newCol].merged) {
         grid[newRow][newCol].value *= 2;
         score += grid[newRow][newCol].value;
-        lv_label_set_text_fmt(scoreText, "Score #FFFF00 %i#", score);
+        lv_label_set_text_fmt(scoreText, "Puntos #FFFF00 %i#", score);
         grid[oldRow][oldCol].value = 0;
         grid[newRow][newCol].merged = true;
         return true;
diff --git a/src/displayapp/screens/WatchFaceCasioStyleG7710.cpp b/src/displayapp/screens/WatchFaceCasioStyleG7710.cpp
index 72bfaaa3..11512645 100644
--- a/src/displayapp/screens/WatchFaceCasioStyleG7710.cpp
+++ b/src/displayapp/screens/WatchFaceCasioStyleG7710.cpp
@@ -76,13 +76,13 @@ WatchFaceCasioStyleG7710::WatchFaceCasioStyleG7710(Controllers::DateTime& dateTi
   lv_obj_align(label_day_of_week, lv_scr_act(), LV_ALIGN_IN_TOP_LEFT, 10, 64);
   lv_obj_set_style_local_text_color(label_day_of_week, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, color_text);
   lv_obj_set_style_local_text_font(label_day_of_week, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, font_dot40);
-  lv_label_set_text_static(label_day_of_week, "SUN");
+  lv_label_set_text_static(label_day_of_week, "LUN");
 
   label_week_number = lv_label_create(lv_scr_act(), nullptr);
   lv_obj_align(label_week_number, lv_scr_act(), LV_ALIGN_IN_TOP_LEFT, 5, 22);
   lv_obj_set_style_local_text_color(label_week_number, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, color_text);
   lv_obj_set_style_local_text_font(label_week_number, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, font_dot40);
-  lv_label_set_text_static(label_week_number, "WK26");
+  lv_label_set_text_static(label_week_number, "WK1");
 
   label_day_of_year = lv_label_create(lv_scr_act(), nullptr);
   lv_obj_align(label_day_of_year, lv_scr_act(), LV_ALIGN_IN_TOP_LEFT, 100, 30);
diff --git a/src/displayapp/screens/WatchFaceInfineat.cpp b/src/displayapp/screens/WatchFaceInfineat.cpp
index 3308303d..b642d657 100644
--- a/src/displayapp/screens/WatchFaceInfineat.cpp
+++ b/src/displayapp/screens/WatchFaceInfineat.cpp
@@ -223,7 +223,7 @@ WatchFaceInfineat::WatchFaceInfineat(Controllers::DateTime& dateTimeController,
   lv_obj_set_style_local_text_color(labelDate, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, grayColor);
   lv_obj_set_style_local_text_font(labelDate, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, font_teko);
   lv_obj_align(labelDate, dateContainer, LV_ALIGN_IN_TOP_MID, 0, 0);
-  lv_label_set_text_static(labelDate, "Mon 01");
+  lv_label_set_text_static(labelDate, "Lun 01");
 
   bleIcon = lv_label_create(lv_scr_act(), nullptr);
   lv_obj_set_style_local_text_color(bleIcon, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, grayColor);
@@ -277,7 +277,7 @@ WatchFaceInfineat::WatchFaceInfineat(Controllers::DateTime& dateTimeController,
   lv_obj_set_size(btnToggleCover, 60, 60);
   lv_obj_align(btnToggleCover, lv_scr_act(), LV_ALIGN_CENTER, 0, 80);
   lv_obj_set_style_local_bg_opa(btnToggleCover, LV_BTN_PART_MAIN, LV_STATE_DEFAULT, LV_OPA_70);
-  const char* labelToggle = settingsController.GetInfineatShowSideCover() ? "ON" : "OFF";
+  const char* labelToggle = settingsController.GetInfineatShowSideCover() ? "ENC" : "APA";
   lblToggle = lv_label_create(btnToggleCover, nullptr);
   lv_label_set_text_static(lblToggle, labelToggle);
   lv_obj_set_event_cb(btnToggleCover, event_handler);
@@ -365,7 +365,7 @@ void WatchFaceInfineat::UpdateSelected(lv_obj_t* object, lv_event_t event) {
       }
       lv_obj_set_hidden(btnNextColor, showSideCover);
       lv_obj_set_hidden(btnPrevColor, showSideCover);
-      const char* labelToggle = showSideCover ? "OFF" : "ON";
+      const char* labelToggle = showSideCover ? "APA" : "ENC";
       lv_label_set_text_static(lblToggle, labelToggle);
     }
     if (object == btnNextColor) {
diff --git a/src/displayapp/screens/WatchFacePineTimeStyle.cpp b/src/displayapp/screens/WatchFacePineTimeStyle.cpp
index 250a745c..f1f5c7cb 100644
--- a/src/displayapp/screens/WatchFacePineTimeStyle.cpp
+++ b/src/displayapp/screens/WatchFacePineTimeStyle.cpp
@@ -177,7 +177,7 @@ WatchFacePineTimeStyle::WatchFacePineTimeStyle(Controllers::DateTime& dateTimeCo
   // Display date
   dateDayOfWeek = lv_label_create(lv_scr_act(), nullptr);
   lv_obj_set_style_local_text_color(dateDayOfWeek, LV_LABEL_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_BLACK);
-  lv_label_set_text_static(dateDayOfWeek, "THU");
+  lv_label_set_text_static(dateDayOfWeek, "JUE");
   lv_obj_align(dateDayOfWeek, calendarOuter, LV_ALIGN_CENTER, 0, -32);
 
   dateDay = lv_label_create(lv_scr_act(), nullptr);
@@ -324,7 +324,7 @@ WatchFacePineTimeStyle::WatchFacePineTimeStyle(Controllers::DateTime& dateTimeCo
   lv_obj_align(btnReset, lv_scr_act(), LV_ALIGN_CENTER, 0, 80);
   lv_obj_set_style_local_bg_opa(btnReset, LV_BTN_PART_MAIN, LV_STATE_DEFAULT, LV_OPA_50);
   lv_obj_t* lblReset = lv_label_create(btnReset, nullptr);
-  lv_label_set_text_static(lblReset, "Rst");
+  lv_label_set_text_static(lblReset, "Rei");
   lv_obj_set_event_cb(btnReset, event_handler);
   lv_obj_set_hidden(btnReset, true);
 
@@ -334,7 +334,7 @@ WatchFacePineTimeStyle::WatchFacePineTimeStyle(Controllers::DateTime& dateTimeCo
   lv_obj_align(btnRandom, lv_scr_act(), LV_ALIGN_CENTER, 0, 0);
   lv_obj_set_style_local_bg_opa(btnRandom, LV_BTN_PART_MAIN, LV_STATE_DEFAULT, LV_OPA_50);
   lv_obj_t* lblRandom = lv_label_create(btnRandom, nullptr);
-  lv_label_set_text_static(lblRandom, "Rnd");
+  lv_label_set_text_static(lblRandom, "Ale");
   lv_obj_set_event_cb(btnRandom, event_handler);
   lv_obj_set_hidden(btnRandom, true);
 
@@ -354,7 +354,7 @@ WatchFacePineTimeStyle::WatchFacePineTimeStyle(Controllers::DateTime& dateTimeCo
   lv_obj_align(btnSteps, lv_scr_act(), LV_ALIGN_CENTER, 0, -10);
   lv_obj_set_style_local_bg_opa(btnSteps, LV_BTN_PART_MAIN, LV_STATE_DEFAULT, LV_OPA_50);
   lv_obj_t* lblSteps = lv_label_create(btnSteps, nullptr);
-  lv_label_set_text_static(lblSteps, "Steps style");
+  lv_label_set_text_static(lblSteps, "Estilo Pasos");
   lv_obj_set_event_cb(btnSteps, event_handler);
   lv_obj_set_hidden(btnSteps, true);
 
@@ -364,7 +364,7 @@ WatchFacePineTimeStyle::WatchFacePineTimeStyle(Controllers::DateTime& dateTimeCo
   lv_obj_align(btnWeather, lv_scr_act(), LV_ALIGN_CENTER, 0, 60);
   lv_obj_set_style_local_bg_opa(btnWeather, LV_BTN_PART_MAIN, LV_STATE_DEFAULT, LV_OPA_50);
   lv_obj_t* lblWeather = lv_label_create(btnWeather, nullptr);
-  lv_label_set_text_static(lblWeather, "Weather");
+  lv_label_set_text_static(lblWeather, "Tiempo");
   lv_obj_set_event_cb(btnWeather, event_handler);
   lv_obj_set_hidden(btnWeather, true);
 
diff --git a/src/displayapp/screens/WatchFaceTerminal.cpp b/src/displayapp/screens/WatchFaceTerminal.cpp
index 72383729..3258a79e 100644
--- a/src/displayapp/screens/WatchFaceTerminal.cpp
+++ b/src/displayapp/screens/WatchFaceTerminal.cpp
@@ -75,9 +75,9 @@ void WatchFaceTerminal::Refresh() {
   powerPresent = batteryController.IsPowerPresent();
   batteryPercentRemaining = batteryController.PercentRemaining();
   if (batteryPercentRemaining.IsUpdated() || powerPresent.IsUpdated()) {
-    lv_label_set_text_fmt(batteryValue, "[BATT]#387b54 %d%%", batteryPercentRemaining.Get());
+    lv_label_set_text_fmt(batteryValue, "[BATE]#387b54 %d%%", batteryPercentRemaining.Get());
     if (batteryController.IsPowerPresent()) {
-      lv_label_ins_text(batteryValue, LV_LABEL_POS_LAST, " Charging");
+      lv_label_ins_text(batteryValue, LV_LABEL_POS_LAST, " Cargando");
     }
   }
 
@@ -85,12 +85,12 @@ void WatchFaceTerminal::Refresh() {
   bleRadioEnabled = bleController.IsRadioEnabled();
   if (bleState.IsUpdated() || bleRadioEnabled.IsUpdated()) {
     if (!bleRadioEnabled.Get()) {
-      lv_label_set_text_static(connectState, "[STAT]#0082fc Disabled#");
+      lv_label_set_text_static(connectState, "[ESTA]#0082fc Desactivado#");
     } else {
       if (bleState.Get()) {
-        lv_label_set_text_static(connectState, "[STAT]#0082fc Connected#");
+        lv_label_set_text_static(connectState, "[ESTA]#0082fc Conectado#");
       } else {
-        lv_label_set_text_static(connectState, "[STAT]#0082fc Disconnected#");
+        lv_label_set_text_static(connectState, "[ESTA]#0082fc Desconectado#");
       }
     }
   }
@@ -98,7 +98,7 @@ void WatchFaceTerminal::Refresh() {
   notificationState = notificationManager.AreNewNotificationsAvailable();
   if (notificationState.IsUpdated()) {
     if (notificationState.Get()) {
-      lv_label_set_text_static(notificationIcon, "You have mail.");
+      lv_label_set_text_static(notificationIcon, "Tienes correo.");
     } else {
       lv_label_set_text_static(notificationIcon, "");
     }
@@ -120,9 +120,9 @@ void WatchFaceTerminal::Refresh() {
         hour = hour - 12;
         ampmChar[0] = 'P';
       }
-      lv_label_set_text_fmt(label_time, "[TIME]#11cc55 %02d:%02d:%02d %s#", hour, minute, second, ampmChar);
+      lv_label_set_text_fmt(label_time, "[HORA]#11cc55 %02d:%02d:%02d %s#", hour, minute, second, ampmChar);
     } else {
-      lv_label_set_text_fmt(label_time, "[TIME]#11cc55 %02d:%02d:%02d", hour, minute, second);
+      lv_label_set_text_fmt(label_time, "[HORA]#11cc55 %02d:%02d:%02d", hour, minute, second);
     }
 
     currentDate = std::chrono::time_point_cast<days>(currentDateTime.Get());
@@ -130,7 +130,7 @@ void WatchFaceTerminal::Refresh() {
       uint16_t year = dateTimeController.Year();
       Controllers::DateTime::Months month = dateTimeController.Month();
       uint8_t day = dateTimeController.Day();
-      lv_label_set_text_fmt(label_date, "[DATE]#007fff %04d-%02d-%02d#", short(year), char(month), char(day));
+      lv_label_set_text_fmt(label_date, "[FECHA]#007fff %02d-%02d-%04d#", char(day), char(month), short(year));
     }
   }
 
@@ -138,14 +138,14 @@ void WatchFaceTerminal::Refresh() {
   heartbeatRunning = heartRateController.State() != Controllers::HeartRateController::States::Stopped;
   if (heartbeat.IsUpdated() || heartbeatRunning.IsUpdated()) {
     if (heartbeatRunning.Get()) {
-      lv_label_set_text_fmt(heartbeatValue, "[L_HR]#ee3311 %d bpm#", heartbeat.Get());
+      lv_label_set_text_fmt(heartbeatValue, "[PULS]#ee3311 %d bpm#", heartbeat.Get());
     } else {
-      lv_label_set_text_static(heartbeatValue, "[L_HR]#ee3311 ---#");
+      lv_label_set_text_static(heartbeatValue, "[PULS]#ee3311 ---#");
     }
   }
 
   stepCount = motionController.NbSteps();
   if (stepCount.IsUpdated()) {
-    lv_label_set_text_fmt(stepValue, "[STEP]#ee3377 %lu steps#", stepCount.Get());
+    lv_label_set_text_fmt(stepValue, "[PASO]#ee3377 %lu pasos#", stepCount.Get());
   }
 }
diff --git a/src/displayapp/screens/settings/SettingBluetooth.cpp b/src/displayapp/screens/settings/SettingBluetooth.cpp
index 82c3dee1..c1aee92a 100644
--- a/src/displayapp/screens/settings/SettingBluetooth.cpp
+++ b/src/displayapp/screens/settings/SettingBluetooth.cpp
@@ -15,8 +15,8 @@ namespace {
   };
 
   constexpr std::array<Option, 2> options = {{
-    {"Enabled", true},
-    {"Disabled", false},
+    {"Activado", true},
+    {"Desactivado", false},
   }};
 
   std::array<CheckboxList::Item, CheckboxList::MaxItems> CreateOptionArray() {
diff --git a/src/displayapp/screens/settings/SettingChimes.cpp b/src/displayapp/screens/settings/SettingChimes.cpp
index 2d3473de..5de20367 100644
--- a/src/displayapp/screens/settings/SettingChimes.cpp
+++ b/src/displayapp/screens/settings/SettingChimes.cpp
@@ -15,9 +15,9 @@ namespace {
   };
 
   constexpr std::array<Option, 3> options = {{
-    {Pinetime::Controllers::Settings::ChimesOption::None, "Off"},
-    {Pinetime::Controllers::Settings::ChimesOption::Hours, "Every hour"},
-    {Pinetime::Controllers::Settings::ChimesOption::HalfHours, "Every 30 mins"},
+    {Pinetime::Controllers::Settings::ChimesOption::None, "Apagado"},
+    {Pinetime::Controllers::Settings::ChimesOption::Hours, "Cada hora"},
+    {Pinetime::Controllers::Settings::ChimesOption::HalfHours, "Cada 30 min"},
   }};
 
   std::array<CheckboxList::Item, CheckboxList::MaxItems> CreateOptionArray() {
@@ -48,7 +48,7 @@ SettingChimes::SettingChimes(Pinetime::Controllers::Settings& settingsController
   : checkboxList(
       0,
       1,
-      "Chimes",
+      "Campanadas",
       Symbols::clock,
       GetDefaultOption(settingsController.GetChimeOption()),
       [&settings = settingsController](uint32_t index) {
diff --git a/src/displayapp/screens/settings/SettingDisplay.cpp b/src/displayapp/screens/settings/SettingDisplay.cpp
index 91f4d590..131dbcc2 100644
--- a/src/displayapp/screens/settings/SettingDisplay.cpp
+++ b/src/displayapp/screens/settings/SettingDisplay.cpp
@@ -33,7 +33,7 @@ SettingDisplay::SettingDisplay(Pinetime::Applications::DisplayApp* app, Pinetime
   lv_cont_set_layout(container1, LV_LAYOUT_PRETTY_TOP);
 
   lv_obj_t* title = lv_label_create(lv_scr_act(), nullptr);
-  lv_label_set_text_static(title, "Display timeout");
+  lv_label_set_text_static(title, "Tiempo Espera");
   lv_label_set_align(title, LV_LABEL_ALIGN_CENTER);
   lv_obj_align(title, lv_scr_act(), LV_ALIGN_IN_TOP_MID, 10, 15);
 
diff --git a/src/displayapp/screens/settings/SettingSetDate.cpp b/src/displayapp/screens/settings/SettingSetDate.cpp
index 93a8da4d..7dd066bb 100644
--- a/src/displayapp/screens/settings/SettingSetDate.cpp
+++ b/src/displayapp/screens/settings/SettingSetDate.cpp
@@ -50,7 +50,7 @@ SettingSetDate::SettingSetDate(Pinetime::Controllers::DateTime& dateTimeControll
   : dateTimeController {dateTimeController}, settingSetDateTime {settingSetDateTime} {
 
   lv_obj_t* title = lv_label_create(lv_scr_act(), nullptr);
-  lv_label_set_text_static(title, "Set current date");
+  lv_label_set_text_static(title, "Ajustar fecha");
   lv_label_set_align(title, LV_LABEL_ALIGN_CENTER);
   lv_obj_align(title, lv_scr_act(), LV_ALIGN_IN_TOP_MID, 15, 15);
 
@@ -83,7 +83,7 @@ SettingSetDate::SettingSetDate(Pinetime::Controllers::DateTime& dateTimeControll
   lv_obj_align(btnSetTime, lv_scr_act(), LV_ALIGN_IN_BOTTOM_MID, 0, 0);
   lv_obj_set_style_local_bg_color(btnSetTime, LV_BTN_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_MAKE(0x38, 0x38, 0x38));
   lblSetTime = lv_label_create(btnSetTime, nullptr);
-  lv_label_set_text_static(lblSetTime, "Set");
+  lv_label_set_text_static(lblSetTime, "Ajustar");
   lv_obj_set_event_cb(btnSetTime, event_handler);
 }
 
diff --git a/src/displayapp/screens/settings/SettingSetTime.cpp b/src/displayapp/screens/settings/SettingSetTime.cpp
index e5a6be2f..56c0a63a 100644
--- a/src/displayapp/screens/settings/SettingSetTime.cpp
+++ b/src/displayapp/screens/settings/SettingSetTime.cpp
@@ -30,7 +30,7 @@ SettingSetTime::SettingSetTime(Pinetime::Controllers::DateTime& dateTimeControll
   : dateTimeController {dateTimeController}, settingsController {settingsController}, settingSetDateTime {settingSetDateTime} {
 
   lv_obj_t* title = lv_label_create(lv_scr_act(), nullptr);
-  lv_label_set_text_static(title, "Set current time");
+  lv_label_set_text_static(title, "Ajustar hora");
   lv_label_set_align(title, LV_LABEL_ALIGN_CENTER);
   lv_obj_align(title, lv_scr_act(), LV_ALIGN_IN_TOP_MID, 15, 15);
 
@@ -68,7 +68,7 @@ SettingSetTime::SettingSetTime(Pinetime::Controllers::DateTime& dateTimeControll
   lv_obj_set_size(btnSetTime, 120, 50);
   lv_obj_align(btnSetTime, lv_scr_act(), LV_ALIGN_IN_BOTTOM_MID, 0, 0);
   lblSetTime = lv_label_create(btnSetTime, nullptr);
-  lv_label_set_text_static(lblSetTime, "Set");
+  lv_label_set_text_static(lblSetTime, "Ajustar");
   lv_obj_set_style_local_bg_color(btnSetTime, LV_BTN_PART_MAIN, LV_STATE_DEFAULT, Colors::bgAlt);
   lv_obj_set_style_local_text_color(lblSetTime, LV_LABEL_PART_MAIN, LV_STATE_DISABLED, LV_COLOR_GRAY);
   lv_obj_set_event_cb(btnSetTime, SetTimeEventHandler);
diff --git a/src/displayapp/screens/settings/SettingShakeThreshold.cpp b/src/displayapp/screens/settings/SettingShakeThreshold.cpp
index be67cc95..4f9430af 100644
--- a/src/displayapp/screens/settings/SettingShakeThreshold.cpp
+++ b/src/displayapp/screens/settings/SettingShakeThreshold.cpp
@@ -20,7 +20,7 @@ SettingShakeThreshold::SettingShakeThreshold(Controllers::Settings& settingsCont
   : settingsController {settingsController}, motionController {motionController}, systemTask {systemTask} {
 
   lv_obj_t* title = lv_label_create(lv_scr_act(), nullptr);
-  lv_label_set_text_static(title, "Wake Sensitivity");
+  lv_label_set_text_static(title, "Despetar Sensibi");
   lv_label_set_align(title, LV_LABEL_ALIGN_CENTER);
   lv_obj_align(title, lv_scr_act(), LV_ALIGN_IN_TOP_MID, 0, 0);
 
@@ -57,7 +57,7 @@ SettingShakeThreshold::SettingShakeThreshold(Controllers::Settings& settingsCont
   lv_obj_align(calButton, lv_scr_act(), LV_ALIGN_IN_BOTTOM_MID, 0, 0);
   lv_btn_set_checkable(calButton, true);
   calLabel = lv_label_create(calButton, nullptr);
-  lv_label_set_text_static(calLabel, "Calibrate");
+  lv_label_set_text_static(calLabel, "Calibrar");
 
   lv_arc_set_value(positionArc, settingsController.GetShakeThreshold());
 
@@ -91,7 +91,7 @@ void SettingShakeThreshold::Refresh() {
       calibrating = 2;
       lv_obj_set_style_local_bg_color(calButton, LV_BTN_PART_MAIN, LV_STATE_CHECKED, LV_COLOR_RED);
       lv_obj_set_style_local_bg_color(calButton, LV_BTN_PART_MAIN, LV_STATE_CHECKED, LV_COLOR_RED);
-      lv_label_set_text_static(calLabel, "Shake!");
+      lv_label_set_text_static(calLabel, "Menea!");
     }
   }
   if (calibrating == 2) {
@@ -121,13 +121,13 @@ void SettingShakeThreshold::UpdateSelected(lv_obj_t* object, lv_event_t event) {
           lv_arc_set_value(positionArc, 0);
           calibrating = 1;
           vCalTime = xTaskGetTickCount();
-          lv_label_set_text_static(calLabel, "Ready!");
+          lv_label_set_text_static(calLabel, "Listo!");
           lv_obj_set_click(positionArc, false);
           lv_obj_set_style_local_bg_color(calButton, LV_BTN_PART_MAIN, LV_STATE_CHECKED, Colors::highlight);
         } else if (lv_btn_get_state(calButton) == LV_BTN_STATE_RELEASED) {
           calibrating = 0;
           lv_obj_set_click(positionArc, true);
-          lv_label_set_text_static(calLabel, "Calibrate");
+          lv_label_set_text_static(calLabel, "Calibrar");
         }
         break;
       }
diff --git a/src/displayapp/screens/settings/SettingSteps.cpp b/src/displayapp/screens/settings/SettingSteps.cpp
index b8d5c405..e09eaa30 100644
--- a/src/displayapp/screens/settings/SettingSteps.cpp
+++ b/src/displayapp/screens/settings/SettingSteps.cpp
@@ -27,7 +27,7 @@ SettingSteps::SettingSteps(Pinetime::Controllers::Settings& settingsController)
   lv_cont_set_layout(container1, LV_LAYOUT_COLUMN_LEFT);
 
   lv_obj_t* title = lv_label_create(lv_scr_act(), nullptr);
-  lv_label_set_text_static(title, "Daily steps goal");
+  lv_label_set_text_static(title, "Obj Pasos Diario");
   lv_label_set_align(title, LV_LABEL_ALIGN_CENTER);
   lv_obj_align(title, lv_scr_act(), LV_ALIGN_IN_TOP_MID, 15, 15);
 
diff --git a/src/displayapp/screens/settings/SettingTimeFormat.cpp b/src/displayapp/screens/settings/SettingTimeFormat.cpp
index df46d8a8..bf8b9f87 100644
--- a/src/displayapp/screens/settings/SettingTimeFormat.cpp
+++ b/src/displayapp/screens/settings/SettingTimeFormat.cpp
@@ -14,8 +14,8 @@ namespace {
   };
 
   constexpr std::array<Option, 2> options = {{
-    {Pinetime::Controllers::Settings::ClockType::H12, "12-hour"},
-    {Pinetime::Controllers::Settings::ClockType::H24, "24-hour"},
+    {Pinetime::Controllers::Settings::ClockType::H12, "12 horas"},
+    {Pinetime::Controllers::Settings::ClockType::H24, "24 horas"},
   }};
 
   std::array<CheckboxList::Item, CheckboxList::MaxItems> CreateOptionArray() {
@@ -46,7 +46,7 @@ SettingTimeFormat::SettingTimeFormat(Pinetime::Controllers::Settings& settingsCo
   : checkboxList(
       0,
       1,
-      "Time format",
+      "Formato Horas",
       Symbols::clock,
       GetDefaultOption(settingsController.GetClockType()),
       [&settings = settingsController](uint32_t index) {
diff --git a/src/displayapp/screens/settings/SettingWakeUp.cpp b/src/displayapp/screens/settings/SettingWakeUp.cpp
index 8df34c20..0343bcf8 100644
--- a/src/displayapp/screens/settings/SettingWakeUp.cpp
+++ b/src/displayapp/screens/settings/SettingWakeUp.cpp
@@ -33,7 +33,7 @@ SettingWakeUp::SettingWakeUp(Pinetime::Controllers::Settings& settingsController
   lv_cont_set_layout(container1, LV_LAYOUT_COLUMN_LEFT);
 
   lv_obj_t* title = lv_label_create(lv_scr_act(), nullptr);
-  lv_label_set_text_static(title, "Wake Up");
+  lv_label_set_text_static(title, "Despertar");
   lv_label_set_align(title, LV_LABEL_ALIGN_CENTER);
   lv_obj_align(title, lv_scr_act(), LV_ALIGN_IN_TOP_MID, 15, 15);
 
diff --git a/src/displayapp/screens/settings/SettingWakeUp.h b/src/displayapp/screens/settings/SettingWakeUp.h
index 28219ca1..c8df3314 100644
--- a/src/displayapp/screens/settings/SettingWakeUp.h
+++ b/src/displayapp/screens/settings/SettingWakeUp.h
@@ -26,10 +26,10 @@ namespace Pinetime {
 
         Controllers::Settings& settingsController;
         static constexpr std::array<Option, 4> options = {{
-          {Controllers::Settings::WakeUpMode::SingleTap, "Single Tap"},
-          {Controllers::Settings::WakeUpMode::DoubleTap, "Double Tap"},
-          {Controllers::Settings::WakeUpMode::RaiseWrist, "Raise Wrist"},
-          {Controllers::Settings::WakeUpMode::Shake, "Shake Wake"},
+          {Controllers::Settings::WakeUpMode::SingleTap, "Un Toque"},
+          {Controllers::Settings::WakeUpMode::DoubleTap, "Dos Toques"},
+          {Controllers::Settings::WakeUpMode::RaiseWrist, "Levanta Reloj"},
+          {Controllers::Settings::WakeUpMode::Shake, "Meneo Despert"},
         }};
 
         lv_obj_t* cbOption[options.size()];
diff --git a/src/displayapp/screens/settings/SettingWatchFace.h b/src/displayapp/screens/settings/SettingWatchFace.h
index 45a50e3d..b4ad6e30 100644
--- a/src/displayapp/screens/settings/SettingWatchFace.h
+++ b/src/displayapp/screens/settings/SettingWatchFace.h
@@ -32,7 +32,7 @@ namespace Pinetime {
         Controllers::Settings& settingsController;
         Pinetime::Controllers::FS& filesystem;
 
-        static constexpr const char* title = "Watch face";
+        static constexpr const char* title = "Tema Reloj";
         static constexpr const char* symbol = Symbols::home;
 
         static constexpr int settingsPerScreen = 4;
@@ -41,11 +41,11 @@ namespace Pinetime {
         static constexpr int nScreens = 2;
 
         std::array<Screens::CheckboxList::Item, settingsPerScreen * nScreens> watchfaces {
-          {{"Digital face", true},
-           {"Analog face", true},
+          {{"Tema Digital", true},
+           {"Tema Analogic", true},
            {"PineTimeStyle", true},
            {"Terminal", true},
-           {"Infineat face", Applications::Screens::WatchFaceInfineat::IsAvailable(filesystem)},
+           {"Tema Infineat", Applications::Screens::WatchFaceInfineat::IsAvailable(filesystem)},
            {"Casio G7710", Applications::Screens::WatchFaceCasioStyleG7710::IsAvailable(filesystem)},
            {"", false},
            {"", false}}};
diff --git a/src/displayapp/screens/settings/Settings.h b/src/displayapp/screens/settings/Settings.h
index 3f809753..4b8250ea 100644
--- a/src/displayapp/screens/settings/Settings.h
+++ b/src/displayapp/screens/settings/Settings.h
@@ -32,20 +32,20 @@ namespace Pinetime {
         static constexpr int nScreens = 3;
 
         static constexpr std::array<List::Applications, entriesPerScreen * nScreens> entries {{
-          {Symbols::sun, "Display", Apps::SettingDisplay},
-          {Symbols::eye, "Wake Up", Apps::SettingWakeUp},
-          {Symbols::clock, "Time format", Apps::SettingTimeFormat},
-          {Symbols::home, "Watch face", Apps::SettingWatchFace},
+          {Symbols::sun, "Pantalla", Apps::SettingDisplay},
+          {Symbols::eye, "Despertar", Apps::SettingWakeUp},
+          {Symbols::clock, "Formato Horas", Apps::SettingTimeFormat},
+          {Symbols::home, "Tema Reloj", Apps::SettingWatchFace},
 
-          {Symbols::shoe, "Steps", Apps::SettingSteps},
-          {Symbols::clock, "Date&Time", Apps::SettingSetDateTime},
-          {Symbols::batteryHalf, "Battery", Apps::BatteryInfo},
-          {Symbols::clock, "Chimes", Apps::SettingChimes},
+          {Symbols::shoe, "Pasos", Apps::SettingSteps},
+          {Symbols::clock, "Fecha y Hora", Apps::SettingSetDateTime},
+          {Symbols::batteryHalf, "Bateria", Apps::BatteryInfo},
+          {Symbols::clock, "Campanadas", Apps::SettingChimes},
 
-          {Symbols::tachometer, "Shake Calib.", Apps::SettingShakeThreshold},
+          {Symbols::tachometer, "Meneo Calib.", Apps::SettingShakeThreshold},
           {Symbols::check, "Firmware", Apps::FirmwareValidation},
           {Symbols::bluetooth, "Bluetooth", Apps::SettingBluetooth},
-          {Symbols::list, "About", Apps::SysInfo},
+          {Symbols::list, "Acerca de", Apps::SysInfo},
 
           // {Symbols::none, "None", Apps::None},
           // {Symbols::none, "None", Apps::None},
diff --git a/src/libs/mynewt-nimble/apps/mesh_badge/src/main.c b/src/libs/mynewt-nimble/apps/mesh_badge/src/main.c
index d856d816..d7d1a433 100644
--- a/src/libs/mynewt-nimble/apps/mesh_badge/src/main.c
+++ b/src/libs/mynewt-nimble/apps/mesh_badge/src/main.c
@@ -143,29 +143,29 @@ static void passkey_display(uint16_t conn_handle)
 static void pairing_complete(uint16_t conn_handle, bool bonded)
 {
 	printk("Pairing Complete\n");
-	board_show_text("Pairing Complete", false, K_SECONDS(2));
+	board_show_text("Emparejado Hecho", false, K_SECONDS(2));
 }
 
 static void pairing_failed(uint16_t conn_handle)
 {
 	printk("Pairing Failed\n");
-	board_show_text("Pairing Failed", false, K_SECONDS(2));
+	board_show_text("Emparejado Fallo", false, K_SECONDS(2));
 }
 
 static void connected(uint16_t conn_handle, int err)
 {
-	printk("Connected (err 0x%02x)\n", err);
+	printk("Conectado (err 0x%02x)\n", err);
 
 	if (err) {
-		board_show_text("Connection failed", false, K_SECONDS(2));
+		board_show_text("Fallo al conectar", false, K_SECONDS(2));
 	} else {
-		board_show_text("Connected", false, K_FOREVER);
+		board_show_text("Conectado", false, K_FOREVER);
 	}
 }
 
 static void disconnected(uint16_t conn_handle, int reason)
 {
-	printk("Disconnected (reason 0x%02x)\n", reason);
+	printk("Desconectado (reason 0x%02x)\n", reason);
 
 	if (strcmp(MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME), bt_get_name()) != 0 &&
 	    !mesh_is_initialized()) {
@@ -173,7 +173,7 @@ static void disconnected(uint16_t conn_handle, int reason)
 		ble_gap_adv_stop();
 		mesh_start();
 	} else {
-		board_show_text("Disconnected", false, K_SECONDS(2));
+		board_show_text("Desconectado", false, K_SECONDS(2));
 	}
 }
 
@@ -283,7 +283,7 @@ static void on_sync(void)
 	err = ble_hs_id_set_rnd(addr.val);
 	assert(err == 0);
 
-	printk("Bluetooth initialized\n");
+	printk("Bluetooth activado\n");
 
 	err = mesh_init(addr.type);
 	if (err) {
